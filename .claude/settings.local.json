{
  "permissions": {
    "allow": [
      "Bash(gemini \"Act√∫a como experto en prompts de Midjourney. Genera 10 prompts PERFECTOS para crear im√°genes de alta calidad para una cafeter√≠a premium llamada Fluffy Bites. Deben ser ultra realistas, cinematogr√°ficos, con iluminaci√≥n profesional. Temas: caf√© latte art, pasteles, ambiente acogedor, barista trabajando. Formato: solo los prompts en ingl√©s, uno por l√≠nea, incluye par√°metros --ar 16:9 --style raw --v 6\")",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\n‚ú® FASE 1 COMPLETE: Sistema de Men√∫ Automatizado\n\nüéØ Features Implementados:\n- Sistema CMS automatizado con JSON (data/products.json)\n- Auto-generador de men√∫ din√°mico (js/auto-menu-generator.js)\n- CSS Premium estilo Apple (css/apple-premium-menu.css)\n- Dashboard admin completo (admin.html)\n- Sistema zero-code para actualizar productos\n- Documentaci√≥n completa (PRODUCT-MANAGEMENT-GUIDE.md)\n\nüöÄ Capacidades:\n- Men√∫ se genera autom√°ticamente desde JSON\n- Panel admin visual en /admin\n- A√±adir/Editar/Eliminar productos sin c√≥digo\n- Toggle r√°pido disponibilidad/featured\n- Export/Import de productos\n- B√∫squeda y filtrado\n- Estad√≠sticas en tiempo real\n\nüé® Dise√±o:\n- Animaciones fluidas estilo Apple\n- Lazy loading de im√°genes\n- Efectos 3D en hover\n- Parallax scrolling\n- Transiciones suaves\n- Mobile-first responsive\n\nüìù Uso:\n1. Ir a /admin\n2. Gestionar productos visualmente\n3. Descargar products.json\n4. Commit y push a GitHub\n5. Netlify actualiza autom√°ticamente\n\nü§ñ Generated with Claude Code\nhttps://claude.com/claude-code\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(npm install:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\n‚ú® FASE 2 COMPLETE: Next.js 14 + TypeScript + API Routes\n\nüöÄ Arquitectura Moderna Implementada:\n- Next.js 14 con App Router\n- TypeScript 5.3 configurado\n- Tailwind CSS 3.4 + Custom Design System\n- API Routes completas para productos\n- P√°ginas din√°micas con SSR/SSG\n\nüìÅ Estructura Creada:\napp/\n‚îú‚îÄ‚îÄ layout.tsx          ‚Üí Layout principal con SEO\n‚îú‚îÄ‚îÄ globals.css         ‚Üí Estilos Tailwind + custom\n‚îú‚îÄ‚îÄ page.tsx            ‚Üí Homepage moderna\n‚îú‚îÄ‚îÄ menu/page.tsx       ‚Üí Men√∫ din√°mico consumiendo API\n‚îî‚îÄ‚îÄ api/\n    ‚îî‚îÄ‚îÄ products/\n        ‚îú‚îÄ‚îÄ route.ts    ‚Üí CRUD productos (GET/POST)\n        ‚îî‚îÄ‚îÄ [id]/route.ts ‚Üí Operaciones individuales (GET/PATCH/DELETE)\n\nüé® Componentes UI:\ncomponents/ui/\n‚îî‚îÄ‚îÄ button.tsx          ‚Üí Button component con variantes\n\nüõ†Ô∏è Configuraci√≥n:\n- next.config.js        ‚Üí Optimizaci√≥n im√°genes + rewrites\n- tsconfig.json         ‚Üí TypeScript paths\n- tailwind.config.ts    ‚Üí Design tokens estilo Apple\n- postcss.config.js     ‚Üí PostCSS + Autoprefixer\n\nüí° Features:\n- API REST completa para productos\n- Lectura/Escritura directa a products.json\n- P√°gina de men√∫ con filtros y b√∫squeda\n- Animaciones fluidas Apple-style\n- Dark mode por defecto\n- Responsive mobile-first\n- SEO optimizado\n\nüîó Compatibilidad:\n- Sitio est√°tico actual sigue funcionando (/index.html)\n- Next.js en paralelo (npm run dev)\n- Sistema h√≠brido hasta migraci√≥n completa\n\nüì¶ Dependencias Instaladas:\n- next@14.0.4\n- react@18.2.0\n- typescript@5.3.3\n- tailwindcss@3.4.0\n- tailwindcss-animate@1.0.7\n- radix-ui components\n- class-variance-authority\n- clsx + tailwind-merge\n\nüéØ Pr√≥ximos Pasos:\n- FASE 3: Stripe payments\n- FASE 4: Facturaci√≥n autom√°tica\n- FASE 5: Automatizaciones 24/7\n\nü§ñ Generated with Claude Code\nhttps://claude.com/claude-code\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nüõí FASE 3 COMPLETE: Stripe Payments + E-commerce System\n\nüí∞ Sistema de Pagos Implementado:\n- Integraci√≥n completa con Stripe\n- Carrito de compras con Context API\n- Checkout session creation\n- Payment webhooks\n- Order processing\n\nüì¶ Archivos Creados:\nlib/stripe.ts                  ‚Üí Stripe client + utils\ncontext/CartContext.tsx        ‚Üí Shopping cart state management\napp/api/checkout/route.ts      ‚Üí Create Stripe checkout session\napp/api/webhooks/stripe/route.ts ‚Üí Process payment webhooks\napp/cart/page.tsx              ‚Üí Shopping cart UI\napp/order/success/page.tsx     ‚Üí Order confirmation page\n\nüé® Features E-commerce:\n- Add to cart functionality\n- Update quantities\n- Remove items\n- Cart persistence (localStorage)\n- Real-time price calculations\n- Secure checkout with Stripe\n- Automatic order creation\n- Email confirmations ready\n- Shipping address collection\n- Promotion codes support\n\nüîí Seguridad:\n- Webhook signature verification\n- Server-side payment processing\n- Secure session handling\n- PCI compliance (via Stripe)\n\nüìù Order Management:\n- Orders saved to data/orders/\n- Order tracking by session ID\n- Customer details capture\n- Shipping address saved\n- Ready for email notifications\n\nüéØ Pr√≥ximos Pasos:\n- FASE 4: Facturaci√≥n autom√°tica PDF\n- FASE 5: Automatizaciones 24/7\n- Email confirmations\n- SMS notifications\n\nü§ñ Generated with Claude Code\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")"
    ],
    "deny": [],
    "ask": []
  }
}
